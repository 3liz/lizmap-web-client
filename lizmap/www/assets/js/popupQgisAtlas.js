/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/legacy/popupQgisAtlas.js":
/*!**************************************!*\
  !*** ./src/legacy/popupQgisAtlas.js ***!
  \**************************************/
/***/ (() => {

eval("\n\nlizMap.events.on({\n\n    'lizmappopupdisplayed': function(){\n\n        if( !('qgisServerPlugins' in lizMap.config) )\n            return;\n        if( !('atlasprint' in lizMap.config.qgisServerPlugins) )\n            return;\n        if( !('printTemplates' in lizMap.config) || lizMap.config.printTemplates.length == 0)\n            return;\n\n        $('div.lizmapPopupDiv').each(function(){\n            if($(this).find('a.lizmap-atlasprint-link').length != 0) {\n                // Atlas print link already exist\n                return true;\n            }\n            if($(this).find('input.lizmap-popup-layer-feature-id').length == 0) {\n                // The feature id is not found\n                return true;\n            }\n\n            var getLayerId = $(this).find('input.lizmap-popup-layer-feature-id:first').val().split('.');\n            var layerId = getLayerId[0];\n            var fid = getLayerId[1];\n            var layerName=getLayerId[0].split(/[0-9]/)[0];\n\n            for(var i in lizMap.config.printTemplates){\n                var t = lizMap.config.printTemplates[i];\n                if('atlas' in t){\n                    if(layerId == t.atlas.coverageLayer){\n                        // Build URL\n                        var url = OpenLayers.Util.urlAppend(\n                            lizUrls.wms,\n                            OpenLayers.Util.getParameterString(lizUrls.params)\n                        );\n                        url += '&SERVICE=WMS';\n                        url += '&VERSION=1.3.0&REQUEST=GetPrintAtlas';\n                        url += '&FORMAT=pdf';\n                        url += '&EXCEPTIONS=application/vnd.ogc.se_inimage&TRANSPARENT=true';\n                        url += '&DPI=100';\n                        url += '&TEMPLATE='+t.title;\n                        url += '&LAYER='+layerName;\n                        url += '&EXP_FILTER=$id IN ('+fid+')';\n\n                        // Add button and div to set custom labels\n                        let customLabels = '';\n\n                        const protectedLabelsId = [\"lizmap_user\", \"lizmap_user_groups\"];\n                        for(const label of t.labels){\n                            if (protectedLabelsId.includes(label.id)){\n                                // These values mustn't be shown in the UI and will be overridden by LWC PHP and AtlasPrint anyway\n                                continue;\n                            }\n                            if (label.htmlState){\n                                customLabels += `<textarea class=\"atlasprint-custom-labels\" cols=\"15\" data-print-id=\"${label.id}\" name=\"${label.id}\" placeholder=\"${label.text}\">${label.text}</textarea>`;\n                            }else{\n                                customLabels += `<input type=\"text\" class=\"atlasprint-custom-labels\" size=\"15\" data-print-id=\"${label.id}\" name=\"${label.id}\" placeholder=\"${label.text}\" value=\"${label.text}\">`;\n                            }\n                        }\n\n                        // Create custom labels tool if any custom labels have been defined\n                        const customLabelsTool = (customLabels === '') ? '' : `<div class=\"toggle-custom-labels-view\"><button><i class=\"icon-cog\" title=\"${lizDict['print.customLabels.tooltip']}\"></i></button><div>${customLabels}</div></div>`;\n\n                        $(this).append('<a class=\"lizmap-atlasprint-link\" data-href=\"' + url + '\" href=\"' + url + '\" target=\"_blank\" title=\"' + lizDict['attributeLayers.toolbar.btn.data.export.title'] + ' ' + t.title + '\"><span class=\"icon\"></span>' + t.title + '</a>' + customLabelsTool + '<br>');\n\n                        // Activate toggle on custom labels button\n                        $('.toggle-custom-labels-view > button').click(function () {\n                            $(this).next().toggle();\n                        });\n\n                        // Activate URL rewrite when user modify custom labels value\n                        $('.atlasprint-custom-labels').on('input', function(){\n                            const atlasPrintLink = $(this).parents('.toggle-custom-labels-view').prev();\n\n                            let customLabelsParams = '';\n\n                            $('.atlasprint-custom-labels').each(function(){\n                                customLabelsParams += '&' + $(this).data('print-id') + '=' + encodeURIComponent($(this).val());\n                            });\n\n                            atlasPrintLink.attr('href', atlasPrintLink.data('href') + customLabelsParams);\n                        });\n\n                        // Add tooltips\n                        $(this).find('a.lizmap-atlasprint-link, .toggle-custom-labels-view button i').tooltip();\n                    }\n                }\n            }\n        });\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGVnYWN5L3BvcHVwUWdpc0F0bGFzLmpzLmpzIiwibWFwcGluZ3MiOiI7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1SEFBdUgsU0FBUyxVQUFVLFNBQVMsaUJBQWlCLFdBQVcsSUFBSSxXQUFXO0FBQzlMLDZCQUE2QjtBQUM3QixnSUFBZ0ksU0FBUyxVQUFVLFNBQVMsaUJBQWlCLFdBQVcsV0FBVyxXQUFXO0FBQzlNO0FBQ0E7O0FBRUE7QUFDQSwySkFBMkosc0NBQXNDLHNCQUFzQixhQUFhOztBQUVwTzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7O0FBRXpCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsNkJBQTZCOztBQUU3QjtBQUNBLHlCQUF5Qjs7QUFFekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hc3NldHMvLi9zcmMvbGVnYWN5L3BvcHVwUWdpc0F0bGFzLmpzP2E1MTMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbmxpek1hcC5ldmVudHMub24oe1xuXG4gICAgJ2xpem1hcHBvcHVwZGlzcGxheWVkJzogZnVuY3Rpb24oKXtcblxuICAgICAgICBpZiggISgncWdpc1NlcnZlclBsdWdpbnMnIGluIGxpek1hcC5jb25maWcpIClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYoICEoJ2F0bGFzcHJpbnQnIGluIGxpek1hcC5jb25maWcucWdpc1NlcnZlclBsdWdpbnMpIClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYoICEoJ3ByaW50VGVtcGxhdGVzJyBpbiBsaXpNYXAuY29uZmlnKSB8fCBsaXpNYXAuY29uZmlnLnByaW50VGVtcGxhdGVzLmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICQoJ2Rpdi5saXptYXBQb3B1cERpdicpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmKCQodGhpcykuZmluZCgnYS5saXptYXAtYXRsYXNwcmludC1saW5rJykubGVuZ3RoICE9IDApIHtcbiAgICAgICAgICAgICAgICAvLyBBdGxhcyBwcmludCBsaW5rIGFscmVhZHkgZXhpc3RcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCQodGhpcykuZmluZCgnaW5wdXQubGl6bWFwLXBvcHVwLWxheWVyLWZlYXR1cmUtaWQnKS5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBmZWF0dXJlIGlkIGlzIG5vdCBmb3VuZFxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZ2V0TGF5ZXJJZCA9ICQodGhpcykuZmluZCgnaW5wdXQubGl6bWFwLXBvcHVwLWxheWVyLWZlYXR1cmUtaWQ6Zmlyc3QnKS52YWwoKS5zcGxpdCgnLicpO1xuICAgICAgICAgICAgdmFyIGxheWVySWQgPSBnZXRMYXllcklkWzBdO1xuICAgICAgICAgICAgdmFyIGZpZCA9IGdldExheWVySWRbMV07XG4gICAgICAgICAgICB2YXIgbGF5ZXJOYW1lPWdldExheWVySWRbMF0uc3BsaXQoL1swLTldLylbMF07XG5cbiAgICAgICAgICAgIGZvcih2YXIgaSBpbiBsaXpNYXAuY29uZmlnLnByaW50VGVtcGxhdGVzKXtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IGxpek1hcC5jb25maWcucHJpbnRUZW1wbGF0ZXNbaV07XG4gICAgICAgICAgICAgICAgaWYoJ2F0bGFzJyBpbiB0KXtcbiAgICAgICAgICAgICAgICAgICAgaWYobGF5ZXJJZCA9PSB0LmF0bGFzLmNvdmVyYWdlTGF5ZXIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQnVpbGQgVVJMXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gT3BlbkxheWVycy5VdGlsLnVybEFwcGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXpVcmxzLndtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPcGVuTGF5ZXJzLlV0aWwuZ2V0UGFyYW1ldGVyU3RyaW5nKGxpelVybHMucGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSAnJlNFUlZJQ0U9V01TJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSAnJlZFUlNJT049MS4zLjAmUkVRVUVTVD1HZXRQcmludEF0bGFzJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSAnJkZPUk1BVD1wZGYnO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsICs9ICcmRVhDRVBUSU9OUz1hcHBsaWNhdGlvbi92bmQub2djLnNlX2luaW1hZ2UmVFJBTlNQQVJFTlQ9dHJ1ZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgKz0gJyZEUEk9MTAwJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSAnJlRFTVBMQVRFPScrdC50aXRsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSAnJkxBWUVSPScrbGF5ZXJOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsICs9ICcmRVhQX0ZJTFRFUj0kaWQgSU4gKCcrZmlkKycpJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIGJ1dHRvbiBhbmQgZGl2IHRvIHNldCBjdXN0b20gbGFiZWxzXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VzdG9tTGFiZWxzID0gJyc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3RlY3RlZExhYmVsc0lkID0gW1wibGl6bWFwX3VzZXJcIiwgXCJsaXptYXBfdXNlcl9ncm91cHNcIl07XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IoY29uc3QgbGFiZWwgb2YgdC5sYWJlbHMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm90ZWN0ZWRMYWJlbHNJZC5pbmNsdWRlcyhsYWJlbC5pZCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGVzZSB2YWx1ZXMgbXVzdG4ndCBiZSBzaG93biBpbiB0aGUgVUkgYW5kIHdpbGwgYmUgb3ZlcnJpZGRlbiBieSBMV0MgUEhQIGFuZCBBdGxhc1ByaW50IGFueXdheVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhYmVsLmh0bWxTdGF0ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUxhYmVscyArPSBgPHRleHRhcmVhIGNsYXNzPVwiYXRsYXNwcmludC1jdXN0b20tbGFiZWxzXCIgY29scz1cIjE1XCIgZGF0YS1wcmludC1pZD1cIiR7bGFiZWwuaWR9XCIgbmFtZT1cIiR7bGFiZWwuaWR9XCIgcGxhY2Vob2xkZXI9XCIke2xhYmVsLnRleHR9XCI+JHtsYWJlbC50ZXh0fTwvdGV4dGFyZWE+YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tTGFiZWxzICs9IGA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImF0bGFzcHJpbnQtY3VzdG9tLWxhYmVsc1wiIHNpemU9XCIxNVwiIGRhdGEtcHJpbnQtaWQ9XCIke2xhYmVsLmlkfVwiIG5hbWU9XCIke2xhYmVsLmlkfVwiIHBsYWNlaG9sZGVyPVwiJHtsYWJlbC50ZXh0fVwiIHZhbHVlPVwiJHtsYWJlbC50ZXh0fVwiPmA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgY3VzdG9tIGxhYmVscyB0b29sIGlmIGFueSBjdXN0b20gbGFiZWxzIGhhdmUgYmVlbiBkZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXN0b21MYWJlbHNUb29sID0gKGN1c3RvbUxhYmVscyA9PT0gJycpID8gJycgOiBgPGRpdiBjbGFzcz1cInRvZ2dsZS1jdXN0b20tbGFiZWxzLXZpZXdcIj48YnV0dG9uPjxpIGNsYXNzPVwiaWNvbi1jb2dcIiB0aXRsZT1cIiR7bGl6RGljdFsncHJpbnQuY3VzdG9tTGFiZWxzLnRvb2x0aXAnXX1cIj48L2k+PC9idXR0b24+PGRpdj4ke2N1c3RvbUxhYmVsc308L2Rpdj48L2Rpdj5gO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmFwcGVuZCgnPGEgY2xhc3M9XCJsaXptYXAtYXRsYXNwcmludC1saW5rXCIgZGF0YS1ocmVmPVwiJyArIHVybCArICdcIiBocmVmPVwiJyArIHVybCArICdcIiB0YXJnZXQ9XCJfYmxhbmtcIiB0aXRsZT1cIicgKyBsaXpEaWN0WydhdHRyaWJ1dGVMYXllcnMudG9vbGJhci5idG4uZGF0YS5leHBvcnQudGl0bGUnXSArICcgJyArIHQudGl0bGUgKyAnXCI+PHNwYW4gY2xhc3M9XCJpY29uXCI+PC9zcGFuPicgKyB0LnRpdGxlICsgJzwvYT4nICsgY3VzdG9tTGFiZWxzVG9vbCArICc8YnI+Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFjdGl2YXRlIHRvZ2dsZSBvbiBjdXN0b20gbGFiZWxzIGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLnRvZ2dsZS1jdXN0b20tbGFiZWxzLXZpZXcgPiBidXR0b24nKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5uZXh0KCkudG9nZ2xlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWN0aXZhdGUgVVJMIHJld3JpdGUgd2hlbiB1c2VyIG1vZGlmeSBjdXN0b20gbGFiZWxzIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcuYXRsYXNwcmludC1jdXN0b20tbGFiZWxzJykub24oJ2lucHV0JywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdGxhc1ByaW50TGluayA9ICQodGhpcykucGFyZW50cygnLnRvZ2dsZS1jdXN0b20tbGFiZWxzLXZpZXcnKS5wcmV2KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VzdG9tTGFiZWxzUGFyYW1zID0gJyc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuYXRsYXNwcmludC1jdXN0b20tbGFiZWxzJykuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21MYWJlbHNQYXJhbXMgKz0gJyYnICsgJCh0aGlzKS5kYXRhKCdwcmludC1pZCcpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KCQodGhpcykudmFsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXRsYXNQcmludExpbmsuYXR0cignaHJlZicsIGF0bGFzUHJpbnRMaW5rLmRhdGEoJ2hyZWYnKSArIGN1c3RvbUxhYmVsc1BhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRvb2x0aXBzXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbmQoJ2EubGl6bWFwLWF0bGFzcHJpbnQtbGluaywgLnRvZ2dsZS1jdXN0b20tbGFiZWxzLXZpZXcgYnV0dG9uIGknKS50b29sdGlwKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/legacy/popupQgisAtlas.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/legacy/popupQgisAtlas.js"]();
/******/ 	
/******/ })()
;